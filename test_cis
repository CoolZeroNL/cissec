#!/bin/bash

#https://benchmarks.cisecurity.org/tools2/linux/CIS_CentOS_Linux_7_Benchmark_v1.1.0.pdf


FSTAB='/etc/fstab'
YUM_CONF='/etc/yum.conf'
GRUB_CFG='/boot/grub2/grub.cfg'
GRUB_DIR='/etc/grub.d'
SELINUX_CFG='/etc/selinux/config'
NTP_CONF='/etc/ntp.conf'
SYSCON_NTPD='/etc/sysconfig/ntpd'
LIMITS_CNF='/etc/security/limits.conf'
SYSCTL_CNF='/etc/sysctl.conf'
CENTOS_REL='/etc/centos-release'
LATEST_REL_STR='CentOS Linux release 7.1.1503 (Core)'
HOSTS_ALLOW='/etc/hosts.allow'
HOSTS_DENY='/etc/hosts.deny'
CIS_CNF='/etc/modprobe.d/CIS.conf'
RSYSLOG_CNF='/etc/rsyslog.conf'
AUDITD_CNF='/etc/audit/auditd.conf'
AUDIT_RULES='/etc/audit/audit.rules'

function separate_partition {
  # Test that the supplied $1 is a separate partition

  local filesystem="${1}"
  grep -q "[[:space:]]${filesystem}[[:space:]]" "${FSTAB}" || return
}

function mount_option {
  # Test the the supplied mount option $2 is in use on the supplied filesystem $1

  local filesystem="${1}"
  local mnt_option="${2}"

  grep "[[:space:]]${filesystem}[[:space:]]" "${FSTAB}" | grep -q "${mnt_option}" || return

  mount | grep "[[:space:]]${filesystem}[[:space:]]" | grep -q "${mnt_option}" || return
}

function bind_mounted_to {
  # Test that a directory /foo/dir is bind mounted onto a particular filesystem

  local directory="${1}"
  local filesystem="${2}"
  local E_NO_MOUNT_OUTPUT=1

  grep "^${filesystem}[[:space:]]" "${FSTAB}" | grep -q "${directory}" || return

  local grep_mount
  grep_mount=$(mount | grep "^${filesystem}[[:space:]]" | grep "${directory}")
  #If $directory doesn't appear in the mount output as mounted on the $filesystem  
  #it may appear in the output as being mounted on the same device as $filesystem, check for this
  local fs_dev
  local dir_dev
  fs_dev="$(mount | grep "[[:space:]]${filesystem}[[:space:]]" | cut -d" " -f1)"
  dir_dev="$(mount | grep "[[:space:]]${directory}[[:space:]]" | cut -d" " -f1)"
  if [[ -z "${grep_mount}" ]] && [[ "${fs_dev}" != "${dir_dev}" ]] ; then
    return "${E_NO_MOUNT_OUTPUT}"
  fi
}

function test_disable_mounting {
  # Test the the supplied filesystem type $1 is disabled

  local module="${1}"
  modprobe -n -v ${module} | grep -q "install \+/bin/true" || return 

  lsmod | grep -qv "${module}" || return
}

function centos_gpg_key_installed {
  # Test CentOS GPG Key is installed
  local centos_off_str='gpg(CentOS-7 Key (CentOS 7 Official Signing Key) <security@centos.org>)'
  rpm -q --queryformat "%{SUMMARY}\n" gpg-pubkey | grep -q "${centos_off_str}" || return
}

function yum_gpgcheck {
  # Check that gpgcheck is Globally Activated
  cut -d \# -f1 ${YUM_CONF} | grep 'gpgcheck' | grep -q 'gpgcheck=1' || return
}

function yum_update {
  # Check for outstanding pkg update with yum
  yum -q check-update || return
}

function pkg_integrity {
  # Verify the installed packages by comparing the installed files against file info stored in the pkg
  local rpm_out
  rpm_out="$(rpm -qVa | awk '$2 != "c" { print $0}')"
  [[ -z "${rpm_out}" ]] || return
}

function rpm_installed {
  # Test whether an rpm is installed

  local rpm="${1}"
  local rpm_out
  rpm -q $rpm | cut -d- -f1 | grep -q "${rpm}" || return
}

function verify_aide_cron {
  # Verify there is a cron job scheduled to run the aide check
  crontab -u root -l | cut -d\# -f1 | grep -q "aide \+--check" || return
}

function verify_selinux_grubcfg {
  # Verify SELinux is not disabled in grub.cfg file 

  local grep_out1
  grep_out1="$(grep selinux=0 ${GRUB_CFG})"
  [[ -z "${grep_out1}" ]] || return

  local grep_out2
  grep_out2="$(grep enforcing=0 ${GRUB_CFG})"
  [[ -z "${grep_out2}" ]] || return
}

function verify_selinux_state {
  # Verify SELinux configured state in /etc/selinux/config
  cut -d \# -f1 ${SELINUX_CFG} | grep 'SELINUX=' | tr -d '[[:space:]]' | grep -q 'SELINUX=enforcing' || return
}

function verify_selinux_policy {
  # Verify SELinux policy in /etc/selinux/config
  cut -d \# -f1 ${SELINUX_CFG} | grep 'SELINUXTYPE=' | tr -d '[[:space:]]' | grep -q 'SELINUXTYPE=targeted' || return
}

function rpm_not_installed {
  # Check that the supplied rpm $1 is not installed
  local rpm="${1}"
  rpm -q $rpm | grep -q "package ${rpm} is not installed" || return
}

function unconfined_procs {
  # Test for unconfined daemons
  local ps_out
  ps_out="$(ps -eZ | egrep 'initrc|unconfined' | egrep -v 'bash|ps|grep')"
  [[ -n "${ps_out}" ]] || return
}

function check_grub_owns {
  # Check User/Group Owner on grub.cfg file
  stat -L -c "%u %g" ${GRUB_CFG} | grep -q '0 0' || return
}

function check_grub_perms {
  # Check Perms on grub.cfg file
  stat -L -c "%a" ${GRUB_CFG} | grep -q '.00' || return
}

function check_file_perms {
  # Check Perms on a supplied file match supplied pattern
  local file="${1}"
  local pattern="${2}"

  stat -L -c "%a" ${file} | grep -q "${pattern}" || return
}

function check_root_owns {
  # Check User/Group Owner on the specified file
  local file="${1}"
  stat -L -c "%u %g" ${file} | grep -q '0 0' || return
}

function check_boot_pass {
  grep -q 'set superusers=' "${GRUB_CFG}"
  if [[ "$?" -ne 0 ]]; then
    grep -q 'set superusers=' ${GRUB_DIR}/* || return
    file="$(grep 'set superusers' ${GRUB_DIR}/* | cut -d: -f1)"
    grep -q 'password' "${file}" || return
  else
    grep -q 'password' "${GRUB_CFG}" || return
  fi
}

function check_svc_not_enabled {
  # Verify that the service $1 is not enabled
  local service="$1" 
  systemctl list-unit-files | grep -qv "${service}" && return 
  systemctl is-enabled "${service}" | grep -q 'enabled' || return
}

function check_svc_enabled {
  # Verify that the service $1 is enabled
  local service="$1" 
  systemctl list-unit-files | grep -q "${service}.service" || return 
  systemctl is-enabled "${service}" | grep -q 'enabled' && return
}

function ntp_cfg {
  cut -d\# -f1 ${NTP_CONF} | egrep "restrict{1}[[:space:]]+default{1}" ${NTP_CONF} | grep kod \
| grep nomodify | grep notrap | grep nopeer | grep -q noquery || return

  cut -d\# -f1 ${NTP_CONF} | egrep "restrict{1}[[:space:]]+\-6{1}[[:space:]]+default" | grep kod \
| grep nomodify | grep notrap | grep nopeer | grep -q noquery || return

  cut -d\# -f1 ${NTP_CONF} | egrep -q "^[[:space:]]*server" || return

  cut -d\# -f1 ${SYSCON_NTPD} | grep "OPTIONS=" | grep -q "ntp:ntp" || return
}

function restrict_core_dumps {
  # Verify that suid programs cannot dump their core
  egrep -q "\*{1}[[:space:]]+hard[[:space:]]+core[[:space:]]+0" "${LIMITS_CNF}" || return
  cut -d\# -f1 ${SYSCTL_CNF} | grep fs.suid_dumpable | cut -d= -f2 | tr -d '[[:space:]]' | grep -q '0' || return 
}

function chk_sysctl_cnf {
  # Check the sysctl_conf file contains a particular flag, set to a particular value 
  local flag="$1"
  local value="$2"
  local sysctl_cnf="$3"

  cut -d\# -f1 ${sysctl_cnf} | grep "${flag}" | cut -d= -f2 | tr -d '[[:space:]]' | grep -q "${value}" || return
}


function chk_sysctl {
  local flag="$1"
  local value="$2"

  sysctl "${flag}" | cut -d= -f2 | tr -d '[[:space:]]' | grep -q "${value}" || return
}

function chk_latest_rel {
  grep -q "${LATEST_REL_STR}" "${CENTOS_REL}" || return
}

function sticky_wrld_w_dirs {
  dirs="$(df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d \
\( -perm -0002 -a ! -perm -1000 \))"
  [[ -z "${dirs}" ]] || return
}

function check_umask {
  cut -d\# -f1 /etc/sysconfig/init | grep -q "umask[[:space:]]027" || return
}

function check_def_tgt {
  #Check that the default boot target is multi-user.target 
  [[ "${default_tgt}" = "multi-user.target" ]] || return
}

function mta_local_only {
  # If port 25 is being listened on, check it is on the loopback address
  netstat_out="$(netstat -an | grep "LIST" | grep ":25[[:space:]]")"
  if [[ "$?" -eq 0 ]] ; then
    ip=$(echo ${netstat_out} | cut -d: -f1 | cut -d" " -f4)
    [[ "${ip}" = "127.0.0.1" ]] || return    
  fi
}

function ip6_router_advertisements_dis {
  # Check that IPv6 Router Advertisements are disabled
  # If ipv6 is disabled then we don't mind what IPv6 router advertisements are set to
  # If ipv6 is enabled then both settings should be set to zero
  chk_sysctl net.ipv6.conf.all.disable_ipv6 1 && return
  chk_sysctl net.ipv6.conf.all.accept_ra 0 || return
  chk_sysctl net.ipv6.conf.default.accept_ra 0 || return
}
  
function ip6_redirect_accept_dis {
  # Check that IPv6 Redirect Acceptance is disabled
  # If ipv6 is disabled then we don't mind what IPv6 redirect acceptance is set to
  # If ipv6 is enabled then both settings should be set to zero
  chk_sysctl net.ipv6.conf.all.disable_ipv6 1 && return
  chk_sysctl net.ipv6.conf.all.accept_redirects 0 || return
  chk_sysctl net.ipv6.conf.default.accept_redirects 0 || return
}

function chk_file_exists {
  local file="$1"
  [[ -f "${file}" ]] || return
}
 
function chk_hosts_deny_content {
  # Check the hosts.deny file resembles ALL: ALL
  cut -d\# -f1 ${HOSTS_DENY} | grep -q "ALL[[:space:]]*:[[:space:]]*ALL" || return
}

function chk_cis_cnf { 
  local protocol="$1"
  local file="$2"
  grep -q "install[[:space:]]${protocol}[[:space:]]/bin/true" ${file} || return
} 

function chk_rsyslog_content {
  grep -q "^*.*[^I][^I]*@" ${RSYSLOG_CNF} || return
}

function audit_log_storage_size {
  # Check the max size of the audit log file is configured
  cut -d\# -f1 ${AUDITD_CNF} | egrep -q "max_log_file[[:space:]]|max_log_file=" || return
}


function dis_on_audit_log_full {
  # Check auditd.conf is configured to notify the admin and halt the system when audit logs are full
  cut -d\# -f2 ${AUDITD_CNF} | grep 'space_left_action' | cut -d= -f2 | tr -d '[[:space:]]' | grep -q 'email' || return
  cut -d\# -f2 ${AUDITD_CNF} | grep 'action_mail_acct' | cut -d= -f2 | tr -d '[[:space:]]' | grep -q 'root' || return
  cut -d\# -f2 ${AUDITD_CNF} | grep 'admin_space_left_action' | cut -d= -f2 | tr -d '[[:space:]]' | grep -q 'halt' || return
}

function keep_all_audit_info {
  # Check auditd.conf is configured to retain audit logs
  cut -d\# -f2 ${AUDITD_CNF} | grep 'max_log_file_action' | cut -d= -f2 | tr -d '[[:space:]]' | grep -q 'keep_logs' || return
}

function audit_procs_prior_2_auditd {
  # Check lines that start with linux has the audit=1 parameter set
  grep_grub="$(grep "^[[:space:]]*linux" ${GRUB_CFG} | grep -v 'audit=1')"
  [[ -z "${grep_grub}" ]] || return
}

function audit_date_time {
  # Confirm that the time-change lines specified below do appear in the audit.rules file
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+time-change" | egrep "\-S[[:space:]]+settimeofday" \
  | egrep "\-S[[:space:]]+adjtimex" | egrep "\-F[[:space:]]+arch=b64" | egrep -q "\-a[[:space:]]+always,exit|\-a[[:space:]]+exit,always" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+time-change" | egrep "\-S[[:space:]]+settimeofday" \
  | egrep "\-S[[:space:]]+adjtimex" | egrep "\-F[[:space:]]+arch=b32" | egrep "\-S[[:space:]]+stime" | egrep -q "\-a[[:space:]]+always,exit|\-a[[:space:]]+exit,always" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+time-change" | egrep "\-F[[:space:]]+arch=b64" \
  | egrep "\-S[[:space:]]+clock_settime" | egrep -q "\-a[[:space:]]+always,exit|\-a[[:space:]]+exit,always" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+time-change" | egrep "\-F[[:space:]]+arch=b32" \
  | egrep "\-S[[:space:]]+clock_settime" | egrep -q "\-a[[:space:]]+always,exit|\-a[[:space:]]+exit,always" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+time-change" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/localtime" || return
}

function audit_user_group {
  # Confirm that the identity lines specified below do appear in the audit.rules file
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+identity" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/group" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+identity" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/passwd" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+identity" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/gshadow" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+identity" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/shadow" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+identity" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/security\/opasswd" || return
}

function audit_network_env {
  # Confirm that the system-locale lines specified below do appear in the audit.rules file
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+system-locale" | egrep "\-S[[:space:]]+sethostname" \
  | egrep "\-S[[:space:]]+setdomainname" | egrep "\-F[[:space:]]+arch=b64" | egrep -q "\-a[[:space:]]+always,exit|\-a[[:space:]]+exit,always" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+system-locale" | egrep "\-S[[:space:]]+sethostname" \
  | egrep "\-S[[:space:]]+setdomainname" | egrep "\-F[[:space:]]+arch=b32" | egrep -q "\-a[[:space:]]+always,exit|\-a[[:space:]]+exit,always" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+system-locale" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/issue" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+system-locale" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/issue.net" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+system-locale" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/hosts" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+system-locale" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/sysconfig\/network" || return
}

function audit_logins_logouts {
  # Confirm that the logins lines specified below do appear in the audit.rules file
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+logins" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/var\/log\/faillog" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+logins" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/var\/log\/lastlog" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+logins" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/var\/log\/tallylog" || return
}

function audit_session_init {
  # Confirm that the logins lines specified below do appear in the audit.rules file
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+session" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/var\/run\/utmp" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+session" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/var\/log\/wtmp" || return
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+session" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/var\/log\/btmp" || return
}

function audit_sys_mac {
  # Confirm that the logins lines specified below do appear in the audit.rules file
  cut -d\# -f1 ${AUDIT_RULES} | egrep "\-k[[:space:]]+MAC-policy" | egrep "\-p[[:space:]]+wa" \
  | egrep -q "\-w[[:space:]]+\/etc\/selinux\/" || return
}

function func_runner {
  func_name=$1
  shift
  args=$@
  ${func_name} ${args}
  if [[ $? -eq 0 ]]; then
    echo ${func_name} ${args} OK
  else
    echo ${func_name} ${args} ERROR
  fi
}


function main {

  # CIS 1.1.1 Test that there is a separate /tmp partition
  func_runner separate_partition /tmp
  
  # CIS 1.1.2 Test that the nodev option is on the /tmp partition
  func_runner mount_option /tmp nodev

  # CIS 1.1.3 Test that the nosuid option is on the /tmp partition
  func_runner mount_option /tmp nosuid

  # CIS 1.1.4 Test that the noexec option is on the /tmp partition
  func_runner mount_option /tmp noexec

  # CIS 1.1.5 Test that there is a separate /var partition
  func_runner separate_partition /var

  # CIS 1.1.6 Test that the /var/tmp directory is bind mounted onto the /tmp filesystem
  func_runner bind_mounted_to /var/tmp /tmp

  # CIS 1.1.7 Test that there is a separate /var/log partition
  func_runner separate_partition /var/log

  # CIS 1.1.8 Test that there is a separate /var/log/audit partition
  func_runner separate_partition /var/log/audit

  # CIS 1.1.9 Test that there is a separate /home partition
  func_runner separate_partition /home

  # CIS 1.1.10 Test that the nodev option is on the /home partition
  func_runner mount_option /home nodev

  # TO DO CIS 1.1.11 nodev option on removable media partitions
  # TO DO CIS 1.1.12 noexec option on removable media partitions
  # TO DO CIS 1.1.13 nosuid option on removable media partitions

  # CIS 1.1.14 Test that the nodev option is on the /dev/shm partition
  func_runner mount_option /dev/shm nodev

  # CIS 1.1.15 Test that the nosuid option is on the /dev/shm partition
  func_runner mount_option /dev/shm nosuid

  # CIS 1.1.16 Test that the noexec option is on the /dev/shm partition
  func_runner mount_option /dev/shm noexec

  # TO DO CIS 1.1.17 Check for the sticky bit on all world writable dirs
  func_runner sticky_wrld_w_dirs 

  # CIS 1.1.18 Test that the mounting of cramfs filesystems is disabled  
  func_runner test_disable_mounting cramfs

  # CIS 1.1.19 Test that the mounting of freevxfs filesystems is disabled  
  func_runner test_disable_mounting freevxfs

  # CIS 1.1.20 Test that the mounting of jffs2 filesystems is disabled  
  func_runner test_disable_mounting jffs2

  # CIS 1.1.21 Test that the mounting of hfs filesystems is disabled  
  func_runner test_disable_mounting hfs

  # CIS 1.1.22 Test that the mounting of hfsplus filesystems is disabled  
  func_runner test_disable_mounting hfsplus

  # CIS 1.1.23 Test that the mounting of squashfs filesystems is disabled  
  func_runner test_disable_mounting squashfs

  # CIS 1.1.24 Test that the mounting of udf filesystems is disabled  
  func_runner test_disable_mounting udf

  # CIS 1.2.1 Check that the CentOS GPG Key is Installed
  func_runner centos_gpg_key_installed

  # CIS 1.2.2 Check that gpgcheck is globally activated
  func_runner yum_gpgcheck

  # CIS 1.2.3 Check software package updates with yum
  func_runner yum_update
  
  # CIS 1.2.4 Verify package integrity using RPM
  func_runner pkg_integrity
  
  # CIS 1.3.1 Check that the AIDE rpm is installed
  func_runner rpm_installed aide
  
  # CIS 1.3.2 Check periodic execution of file integrity (that aide runs from cron)
  func_runner verify_aide_cron

  # CIS 1.4.1 Check that SELinux is not disabled in /boot/grub2/grub.cfg 
  func_runner verify_selinux_grubcfg

  # CIS 1.4.2 Verify SELinux configured state in /etc/selinux/config
  func_runner verify_selinux_state

  # CIS 1.4.3 Verify SELinux policy in /etc/selinux/config
  func_runner verify_selinux_policy

  # CIS 1.4.4 Check setroubleshoot RPM is not installed
  func_runner rpm_not_installed setroubleshoot 

  # CIS 1.4.5 Check setroubleshoot RPM is not installed
  func_runner rpm_not_installed mcstrans 

  # CIS 1.4.6 Check for unconfined daemons
  func_runner unconfined_procs
  
  # CIS 1.5.1 Check ownership on /boot/grub2/grub.cfg
  func_runner check_root_owns ${GRUB_CFG}

  # CIS 1.5.2 Check permissions on /boot/grub2/grub.cfg
  func_runner check_grub_perms

  # CIS 1.5.3 Check permissions on /boot/grub2/grub.cfg
  func_runner check_boot_pass

  # TO DO CIS 1.6.1
  func_runner restrict_core_dumps 

  # CIS 1.6.2 Verify that the flag to force randomized virtual memory region placement is set
  func_runner chk_sysctl kernel.randomize_va_space 2

  # TO DO CIS 1.7
  func_runner chk_latest_rel

  # CIS 2.1.1 Check telnet-server RPM is not installed
  func_runner rpm_not_installed telnet-server

  # CIS 2.1.2 Check telnet RPM is not installed
  func_runner rpm_not_installed telnet

  # CIS 2.1.3 Check rsh-server RPM is not installed
  func_runner rpm_not_installed rsh-server

  # CIS 2.1.4 Check rsh RPM is not installed
  func_runner rpm_not_installed rsh

  # CIS 2.1.5 Check ypbind RPM is not installed
  func_runner rpm_not_installed ypbind

  # CIS 2.1.6 Check ypserv RPM is not installed
  func_runner rpm_not_installed ypserv

  # CIS 2.1.7 Check tftp RPM is not installed
  func_runner rpm_not_installed tftp

  # CIS 2.1.8 Check tftp-server RPM is not installed
  func_runner rpm_not_installed tftp-server

  # CIS 2.1.9 Check talk RPM is not installed
  func_runner rpm_not_installed talk

  # CIS 2.1.10 Check talk-server RPM is not installed
  func_runner rpm_not_installed talk-server

  # CIS 2.1.11 Check xinetd RPM is not installed
  func_runner rpm_not_installed xinetd

  # CIS 2.1.12 Check chargen-dgram is not enabled
  func_runner check_svc_not_enabled chargen-dgram

  # CIS 2.1.13 Check chargen-stream is not enabled
  func_runner check_svc_not_enabled chargen-stream

  # CIS 2.1.14 Check daytime-dgram is not enabled
  func_runner check_svc_not_enabled daytime-dgram
  
  # CIS 2.1.15 Check daytime-stream is not enabled
  func_runner check_svc_not_enabled daytime-stream

  # CIS 2.1.16 Check echo-dgram is not enabled
  func_runner check_svc_not_enabled echo-dgram

  # CIS 2.1.17 Check echo-dgram is not enabled
  func_runner check_svc_not_enabled echo-stream

  # CIS 2.1.18 Check tcpmux-server is not enabled
  func_runner check_svc_not_enabled tcpmux-server

  # CIS 3.1 Check Daemon umask
  func_runner check_umask 

  # TODO CIS 3.2  X Window System
  func_runner check_def_tgt

  # CIS 3.2 Check telnet-server RPM is not installed
  func_runner rpm_not_installed xorg-x11-server-common

  # CIS 3.3 Check avahi-daemon is not enabled
  func_runner check_svc_not_enabled avahi-daemon

  # CIS 3.4 Check cups is not enabled
  func_runner check_svc_not_enabled cups

  # CIS 3.5 Check dhcp RPM is not installed
  func_runner rpm_not_installed dhcp

  # CIS 3.6 NTP config
  func_runner ntp_cfg

  # CIS 3.7.1 Check LDAP RPMs are not installed
  func_runner rpm_not_installed openldap-servers
  func_runner rpm_not_installed openldap-clients

  # CIS 3.8 Check NFS and RPC are not enabled
  func_runner check_svc_not_enabled nfslock
  func_runner check_svc_not_enabled rpcgssd
  func_runner check_svc_not_enabled rpcbind
  func_runner check_svc_not_enabled rpcidmapd
  func_runner check_svc_not_enabled rpcsvcgssd

  # CIS 3.9 Check bind RPM is not installed
  func_runner rpm_not_installed bind

  # CIS 3.10 Check vsftpd RPM is not installed
  func_runner rpm_not_installed vsftpd

  # CIS 3.11 Check httpd RPM is not installed
  func_runner rpm_not_installed httpd

  # CIS 3.12 Check dovecot RPM is not installed
  func_runner rpm_not_installed dovecot

  # CIS 3.13 Check samba RPM is not installed
  func_runner rpm_not_installed samba

  # CIS 3.14 Check squid RPM is not installed
  func_runner rpm_not_installed squid

  # CIS 3.15 Check net-snmp RPM is not installed
  func_runner rpm_not_installed net-snmp

  # CIS 3.16 MTA in local-only mode
  # Disable for now as function requires netstat and netstat is not part of the build
  #func_runner mta_local_only

  # CIS 4.1.1 IP Forwarding should be disabled
  func_runner chk_sysctl net.ipv4.ip_forward 0

  # CIS 4.1.2 Send Packet Redirects should be disabled
  func_runner chk_sysctl net.ipv4.conf.all.send_redirects 0
  func_runner chk_sysctl net.ipv4.conf.default.send_redirects 0

  # CIS 4.2.1 Source Routed Packet Acceptance should be disabled
  func_runner chk_sysctl net.ipv4.conf.all.accept_source_route 0
  func_runner chk_sysctl net.ipv4.conf.default.accept_source_route 0

  # CIS 4.2.2 ICMP Redirect Acceptance should be disabled
  func_runner chk_sysctl net.ipv4.conf.all.accept_redirects 0
  func_runner chk_sysctl net.ipv4.conf.default.accept_redirects 0

  # CIS 4.2.3 ICMP Redirect Acceptance should be disabled
  func_runner chk_sysctl net.ipv4.conf.all.secure_redirects 0
  func_runner chk_sysctl net.ipv4.conf.all.secure_redirects 0
  func_runner chk_sysctl net.ipv4.conf.default.secure_redirects 0

  # CIS 4.2.4 Log Suspicious Packets
  func_runner chk_sysctl net.ipv4.conf.all.log_martians 1
  func_runner chk_sysctl net.ipv4.conf.default.log_martians 1

  # CIS 4.2.5 Ignore Broadcast Requests should be enabled
  func_runner chk_sysctl net.ipv4.icmp_echo_ignore_broadcasts 1

  # CIS 4.2.6 Bad Error Message Protection should be enabled
  func_runner chk_sysctl net.ipv4.icmp_ignore_bogus_error_responses 1

  # CIS 4.2.7 RFC-recommended Source Route Validation should be enabled
  func_runner chk_sysctl net.ipv4.conf.all.rp_filter 1
  func_runner chk_sysctl net.ipv4.conf.default.rp_filter 1

  # CIS 4.2.8 TCP SYN Cookies should be enabled
  func_runner chk_sysctl net.ipv4.tcp_syncookies 1

  # TODO CIS 4.3.1 Check Wireless Interfaces are deactivated

  # CIS 4.4.1.1 If IPv6 enabled IPv6 Router Advertisements should be disabled
  func_runner ip6_router_advertisements_dis

  # CIS 4.4.1.2 If IPv6 enabled IPv6 Redirect Acceptance should be disabled
  func_runner ip6_redirect_accept_dis

  # CIS 4.4.2 IPv6 disabled
  func_runner chk_sysctl net.ipv6.conf.all.disable_ipv6 1

  # CIS 4.5.1 Check that TCP Wrappers are installed
  func_runner rpm_installed tcp_wrappers
  
  # CIS 4.5.2 Check that /etc/hosts.allow exists
  func_runner chk_file_exists ${HOSTS_ALLOW}
  
  # CIS 4.5.3 Verify permissions on /etc/hosts.allow
  func_runner check_root_owns ${HOSTS_ALLOW}
  func_runner check_file_perms ${HOSTS_ALLOW} 644 

  # CIS 4.5.4 Check that /etc/hosts.deny exists
  func_runner chk_file_exists ${HOSTS_DENY}
  func_runner chk_hosts_deny_content
  func_runner check_root_owns ${HOSTS_DENY}
  func_runner check_file_perms ${HOSTS_DENY} 644 

  # CIS 4.6.1 Check that CIS.conf file should disable uncommon network protocol dccp 
  func_runner chk_cis_cnf dccp ${CIS_CNF}

  # CIS 4.6.2 Check that CIS.conf file should disable uncommon network protocol sctp 
  func_runner chk_cis_cnf sctp ${CIS_CNF}

  # CIS 4.6.3 Check that CIS.conf file should disable uncommon network protocol rds 
  func_runner chk_cis_cnf rds ${CIS_CNF}

  # CIS 4.6.4 Check that CIS.conf file should disable uncommon network protocol tipc 
  func_runner chk_cis_cnf tipc ${CIS_CNF}
  
  # CIS 4.7 Firewalld should be enabled
  func_runner check_svc_enabled firewalld  

  # CIS 5.1.1 Check that rsyslog is installed
  func_runner rpm_installed rsyslog
  
  # CIS 5.1.2 rsyslog should be enabled
  func_runner check_svc_enabled rsyslog

  # CIS 5.1.3 Configure rsyslog.conf
  # This is too environment specific to audit for here 

  # CIS 5.1.4 Check perms on rsyslog.conf
  func_runner chk_file_exists ${RSYSLOG_CNF}
  func_runner check_root_owns ${RSYSLOG_CNF}
  func_runner check_file_perms ${RSYSLOG_CNF} 600 
  
  # CIS 5.1.5 rsyslog.conf sending logs to a remote host
  func_runner chk_rsyslog_content 

  # CIS 5.1.6 This benchmark is only applicable to rsyslog loghosts

  # CIS 5.2.1.1 Audit Log Storage Size should be configured
  func_runner audit_log_storage_size

  # CIS 5.2.1.2 Disable System on Audit Log Full
  func_runner dis_on_audit_log_full

  # CIS 5.2.1.3 Disable System on Audit Log Full
  func_runner keep_all_audit_info

  # CIS 5.2.2 auditd should be enabled
  func_runner check_svc_enabled auditd

  # CIS 5.2.3
  func_runner audit_procs_prior_2_auditd

  # CIS 5.2.4 Record events that modify date & time info
  func_runner audit_date_time

  # CIS 5.2.5 Record events that modify user & group info
  func_runner audit_user_group

  # CIS 5.2.6 Record events that modify the system's network env
  func_runner audit_network_env

  # CIS 5.2.7 Record events that modify the system's Mandatory Access Controls
  func_runner audit_sys_mac

  # CIS 5.2.8 Verify Collection Login and Logout events is configured
  func_runner audit_logins_logouts

  # CIS 5.2.9 Verify Collection of Session Initiation info is configured
  func_runner audit_session_init

}

main
